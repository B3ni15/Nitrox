name: Build and Release Nitrox.Launcher

on:
  push:
    tags:
      - 'v*' # Trigger on version tags (e.g., v1.0.0)

env:
  DOTNET_VERSION: '8.0.x' # or your preferred .NET version
  BUILD_CONFIGURATION: 'Release'
  PROJECT_PATH: 'Nitrox.Launcher'

jobs:
  build-and-release:
    runs-on: windows-latest # or ubuntu-latest if cross-platform

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_PATH }}

    - name: Build project
      run: dotnet build ${{ env.PROJECT_PATH }} -c ${{ env.BUILD_CONFIGURATION }} --no-restore

    - name: Publish project
      run: dotnet publish ${{ env.PROJECT_PATH }} -c ${{ env.BUILD_CONFIGURATION }} -o ./publish --no-build

    - name: Create release package
      run: |
        # Create a zip package (adjust as needed for your packaging requirements)
        $releaseName = "Nitrox.Launcher-${{ github.ref_name }}"
        7z a -tzip ./$releaseName.zip ./publish/*

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./Nitrox.Launcher-${{ github.ref_name }}.zip
        asset_name: Nitrox.Launcher-${{ github.ref_name }}.zip
        asset_content_type: application/zip